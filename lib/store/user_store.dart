import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter_interview/utils/global.dart';import 'package:mobx/mobx.dart';part 'user_store.g.dart';class UserStore = _UserStore with _$UserStore;abstract class _UserStore with Store {  @observable  bool isLoading = false;  @observable  bool isCodeSent = false;  @observable  bool isCodePass = false;  @observable  bool isLoggedIn = false;  @observable  String verfId;  @observable  String verificationId;  @observable  String smsCode;  @observable  String phoneNo;  @observable  String gender;  @observable  String age;  @action  sendOTP({String phoneNumber, Function verificationFailed}) async {    isLoading = true;    try {      firebaseAuthService          .verifyPhoneNumber(          phoneNumber: phoneNumber,          codeSentCallBack: (String id, [int forceCodeSend]) {            print("code sent");            updateCodeSentStatus(id, phoneNumber);          },          codeAutoRetrievalTimeout: (String id) {            print("code auto retrieval");            print(id);            updateCodeSentStatus(id, phoneNumber);          },          verificationCompleted: (AuthCredential cred) {            print("verificaation done retrieval");            print(cred);            firebaseAuthService.signinAuto(cred).then((user) {              updateCodeRetrieve(phoneNumber);            });          },          verificationFailed: (exception) {            print("verification failed");            print(exception.message);            isLoading = false;            verificationFailed(exception);            throw exception;          })          .catchError((e) {        isLoading = false;        throw e;      });    } catch (e) {      print(e);      isLoading = false;      throw e;    }  }  @action  updateCodeSentStatus(id, phone) {    verfId = id;    isCodeSent = true;    phoneNo = phone;    isLoading = false;  }  @action  updateCodeRetrieve(phone) {    isCodePass = true;    phoneNo = phone;    registerUser();  }  @action  registerUser() async {    Map<String, dynamic> jsonMap = {      'mainPhone': phoneNo.length > 10 && phoneNo.startsWith("+91")          ? phoneNo.substring(3)          : phoneNo,    };    /*final response = await userService.createUser(jsonMap);    if (response.containsKey("ok") && response['ok'] == true) {      settLoggedIn(response['response']);    } else {      isLoading = false;    }  }*/    @action    settLoggedIn(data) {      print('datal');      print(data);      isLoggedIn = true;      phoneNo = data['mainPhone'];    }    @action    verifyOTP({String otp}) async {      isLoading = true;      String response =      await firebaseAuthService.verifyOTP(verfId: verfId, otp: otp);      if (response != null) {        phoneNo = response;        registerUser();      } else {        isLoading = false;      }    }  }}